import asyncio

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, BotCommand, BotCommandScopeDefault
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.deep_linking import create_start_link, decode_payload

from keyboards.inline_kbs import *
from database.db_users import *
from payment.main import *
from outline.main import *

start_router = Router()

MENU_TEXT = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n
SKYMOUNT VPN ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π VPN, –Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ Shadowsocks
–í —á—ë–º –º—ã –ª—É—á—à–µ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤?
–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã
–ù–µ—Ç –ø–æ—Ç–µ—Ä—å –≤ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø\n
–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã:
/help ‚Äì –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"""

async def set_commands():
    commands = [BotCommand(command='start', description='–°—Ç–∞—Ä—Ç'),
                BotCommand(command='buy', description='–ö—É–ø–∏—Ç—å VPN'),
                BotCommand(command='help', description='–ü–æ–º–æ—â—å')]
    await bot.set_my_commands(commands, BotCommandScopeDefault())


class LinkMsg:
    msg = None

class Form(StatesGroup):
    promokod = State()
    admin_promokod = State()
    send_payscreen = State()
    spam = State()

async def del_call_kb(call: CallbackQuery, *param: bool):
    """
    –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        await bot.delete_message(
            chat_id=call.from_user.id,
            message_id=call.message.message_id
        )
        if param:
            await bot.delete_message(
                chat_id=call.from_user.id,
                message_id=LinkMsg.msg.message_id
            )
            LinkMsg.msg = None

    except Exception as E:
        print(E)

async def del_message_kb(message: Message, *param):
    """
    –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    2-–π –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç 'True' = —É–¥–∞–ª–µ–Ω–∏–µ 5-–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        if param:
            await bot.delete_messages(
                chat_id=message.from_user.id,
                message_ids=[message.message_id - 3, message.message_id - 2,
                             message.message_id - 1, message.message_id, message.message_id + 1]
            )
        else:
            await bot.delete_message(
                chat_id=message.from_user.id,
                message_id=message.message_id
            )

    except Exception as E:
        print(E)

async def confirm_pay(call, amount_days):
    check_old_key = await get_user_info(call.from_user.id, 4)

    try:
        if check_old_key:
            await extension_subscribe(call.from_user.id, amount_days)
            await call.message.answer_photo(config('CONGRATS'), '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n'
                                                                '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.',
                                            reply_markup=return_home())

        else:
            key = create_new_key(call.from_user.id, call.from_user.username).access_url
            await set_user_vpn_key(call.from_user.id, key)
            await call.message.answer_photo(config('CONGRATS'),
                f'–í–∞—à –∫–ª—é—á:\n <pre language="c++">{key}</pre>\n'
                f'\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                reply_markup=apps())
            await call.message.answer('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ', reply_markup=guide())

            if int(amount_days) == 2:
                await set_for_trial_subscribe(call.from_user.id)
            else:
                await set_for_subscribe(call.from_user.id, int(amount_days))

    except Exception as e:
        print(str(e))

async def confirm_pay_msg(message, amount_days):

    check_old_key = await get_user_info(message.from_user.id, 4)

    try:
        if check_old_key:
            await extension_subscribe(message.from_user.id, amount_days)
            await message.answer_photo(config('CONGRATS'), '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n'
                                                                '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.',
                                       reply_markup=return_home())

        else:
            key = create_new_key(message.from_user.id, message.from_user.username).access_url
            await set_user_vpn_key(message.from_user.id, key)
            await message.answer_photo(config('CONGRATS'),
                f'–í–∞—à –∫–ª—é—á:\n <pre language="c++">{key}</pre>\n'
                f'\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                reply_markup=apps())
            await message.answer('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ', reply_markup=guide())
            if int(amount_days) == 2:
                await set_for_trial_subscribe(message.from_user.id)
            else:
                await set_for_subscribe(message.from_user.id, int(amount_days))

    except Exception as e:
        print(str(e))

@start_router.message(CommandStart())
async def cmd_start(message: Message):

    if not await get_user_info(message.from_user.id):
        if len(message.text.split()) > 1:
            referer = message.text.split()[1]
            referer_id = decode_payload(referer) if referer else None

            if referer:
                if referer_id != message.from_user.id:
                    await new_user(message.from_user.id, message.from_user.username,
                               invited_by_id=int(referer_id))
                else:
                    await message.answer('–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π ID –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ.\n'
                                         '–ê–π-–∞–π-–∞–π, –Ω–µ–ª—å–∑—è —Ç–∞–∫ ‚ò∫Ô∏è')
                    await new_user(message.from_user.id, message.from_user.username)
        else:
            await new_user(message.from_user.id, message.from_user.username)

    else:
        user_id, name, is_admin, is_sub, key, label, start_sub, end_sub, balance, invited_by_id, trial_used, send_ref = await get_user_info(message.from_user.id)
        if name != message.from_user.username:
            await update_username(message.from_user.id, message.from_user.username)

    user_id, name, is_admin, is_sub, key, label, start_sub, end_sub, balance, invited_by_id, trial_used, send_ref = await get_user_info(message.from_user.id)

    if is_sub or trial_used:
        await message.answer_photo(config('START'),
                                   MENU_TEXT.format(username=message.from_user.full_name
                                   if message.from_user.full_name
                                   else message.from_user.username),
                                   reply_markup=await main_inline_kb(message.from_user.id))
    else:
        await message.answer_photo(config('START'),
                                   MENU_TEXT.format(username=message.from_user.full_name
                                   if message.from_user.full_name
                                   else message.from_user.username))
        await asyncio.sleep(1)
        await message.answer_photo(config('PRICE'), reply_markup=await main_inline_kb(message.from_user.id))


@start_router.message(Command('help'))
async def about(message: Message):
    await del_message_kb(message, True)
    await message.answer(
        '–£ –Ω–∞—Å –í—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –∫—É–ø–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π VPN.\n'
        '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª—é—á –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n'
        '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 1 –º–∏–Ω—É—Ç—É, –≤—Å—ë –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ!\n'
        '–ù–∞—à–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö —É–≥–æ–ª–∫–∞—Ö –º–∏—Ä–∞, –∏–º–µ—é—Ç –Ω–∏–∑–∫–∏–π –ø–∏–Ω–≥ –∏ –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å!\n'
        '–ê —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - –Ω–∞—à VPN –¥–µ—à–µ–≤—ã–π –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∂–¥–æ–º—É!',
        reply_markup=about_buttons())

@start_router.callback_query(F.data == 'buy')
@start_router.message(Command('buy'))
async def cmd_buy(event: Message|CallbackQuery):
    if isinstance(event, Message):
        await del_message_kb(event, True)
        await event.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä', reply_markup=server_select())
    else:
        await del_call_kb(event)
        await event.message.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä', reply_markup=server_select())


@start_router.callback_query(F.data == 'profile')
async def profile(call: CallbackQuery):
    await del_call_kb(call)
    user_id, name, is_admin, is_sub, key, label, start_sub, end_sub, balance, referer, trial_used, send_ref = await get_user_info(call.from_user.id)
    if name is not None:
        name = '@' + name
    if not is_sub:
        key = '–ù–µ—Ç –∫–ª—é—á–∞'
        await call.message.answer_photo(
            config('PROFILE'),
            'üë§ –ü—Ä–æ—Ñ–∏–ª—å\n'
            f'‚îú <b>ID</b>: {user_id}\n'
            f'‚îú <b>–ù–∏–∫–Ω–µ–π–º</b>: {name}\n'
            f'‚îú <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å</b>: {balance}—Ä.\n'
            f'‚îú <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>: ‚ùå\n'
            f'‚îî <b>–ö–ª—é—á</b>: {key}',
            reply_markup=profile_kb())
    else:
        await call.message.answer_photo(
            config('PROFILE'),
            'üë§ –ü—Ä–æ—Ñ–∏–ª—å\n'
            f'‚îú <b>–ò–î</b>: {call.from_user.id}\n'
            f'‚îú <b>–ù–∏–∫–Ω–µ–π–º</b>: {name}\n'
            f'‚îú <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å</b>: {balance}—Ä.\n'
            f'‚îú <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>: ‚úÖ\n'
            f'‚îú <b>–ù–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏</b>: {start_sub}\n'
            f'‚îú <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>: {end_sub}\n'
            f'‚îî <b>–ö–ª—é—á</b>:\n{key}',
            reply_markup=profile_kb())

@start_router.callback_query(F.data == 'referral_system')
async def referral_system(call: CallbackQuery):
    await del_call_kb(call)
    referral_link = await create_start_link(bot, str(call.from_user.id), encode=True)
    await call.message.answer('–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π 25 —Ä—É–±–ª–µ–π '
                              '–Ω–∞ —Å–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å –∫–∞–∂–¥–æ–≥–æ, '
                              '–∫—Ç–æ –æ–ø–ª–∞—Ç–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É üí∞\n'
                              '\n–ü—Ä–∏–≥–ª–∞—Å–∏ 4 –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ —Ü–µ–ª—ã–π –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏ <b>–ë–ï–°–ü–õ–ê–¢–ù–û!</b>\n'
                              f'\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n <pre language="c++">{referral_link}</pre>\n',
                              reply_markup=return_home())


@start_router.callback_query(F.data == 'get_home')
async def to_homepage_callback(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer_photo(config('START'),
                                    MENU_TEXT.format(username=call.from_user.full_name
                                    if call.from_user.full_name
                                    else call.from_user.username),
                                    reply_markup=await main_inline_kb(call.from_user.id))


@start_router.callback_query(F.data == 'trial')
async def get_trial(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer('–ú—ã –æ—Ç–ª–∏—á–∞–µ–º—Å—è —Ç–µ–º, —á—Ç–æ –¥–∞—ë–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å '
                              '–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö –¥–Ω–µ–π!\n'
                              '–ñ–º–∏ –∫–Ω–æ–ø–∫—É –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!', reply_markup=get_key_kb(2))


@start_router.callback_query(F.data == 'netherlands_server')
async def buy(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer_photo(config('PRICE'),
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏', reply_markup=select_time_kb())


@start_router.callback_query(F.data == 'one_month')
async def price(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer(
        f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏</b>: 100—Ä.\n'
        '\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>',
        reply_markup=select_payment_system(100)
    )


@start_router.callback_query(F.data.in_({'yoomoney_100', 'sbp_100', 'card-transfer_100'}))
async def any_system_pay(call: CallbackQuery):
    price_dict = {'100': '1 –º–µ—Å—è—Ü'}

    types_dict = {'yoomoney': '–ÆMoney (–≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è)',
                  'sbp': '–°–ë–ü (–ö–æ–º–∏—Å—Å–∏—è 0%)'}

    pay_system = call.data.split('_')[0]
    amount = call.data.split('_')[-1]
    await del_call_kb(call)

    await call.message.answer(f'<b>üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>: {types_dict.get(pay_system)}\n'
                              f'\n<b>üïì –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏</b>: {price_dict.get(amount)}\n'
                              f'\n<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å</b>: {amount} —Ä—É–±–ª–µ–π',
                              reply_markup=accept_or_not(pay_system, amount))


@start_router.callback_query(F.data.in_({'accept_yoomoney_100', 'cancel'}))
async def result_yoomoney_pay(call: CallbackQuery):
    result = call.data.split('_')
    payment_system = result[1]
    price = result[-1]
    await del_call_kb(call)
    if result[0] == 'accept':
        if payment_system == 'yoomoney':
            link, label = payment(int(price), str(call.from_user.id) + math_date())
            print(f'–°–æ–∑–¥–∞–Ω –ª–µ–π–±–ª: {label}')
            await add_label(call.from_user.id, label)
            LinkMsg.msg = await call.message.answer(
                f'–í–Ω–∏–º–∞–Ω–∏–µ!\n–ë–∞–Ω–∫ –º–æ–∂–µ—Ç –≤–∑—ã–º–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é!\n'
                f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏:', reply_markup=pay(link))
            await call.message.answer(
                '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É\n',
                reply_markup=payed('yoomoney', price),
                callback_data=price)

    else:
        await call.message.answer('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå.\n–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.')
        await asyncio.sleep(2)
        await call.message.answer_photo(config('START'),
                                        MENU_TEXT.format(username=call.from_user.full_name
                                        if call.from_user.full_name
                                        else call.from_user.username),
                                        reply_markup=await main_inline_kb(call.from_user.id))


@start_router.callback_query(lambda c: c.data.startswith('confirm-pay_yoomoney_'))
async def check_payment_yoomoney(call: CallbackQuery):
    await del_call_kb(call)
    payment_label = await get_user_info(call.from_user.id, 5)
    result = check_payment(payment_label)
    if result is not False:
        amount = {97: 31}  # –ö–æ–ª-–≤–æ –¥–Ω–µ–π –∏—Å—Ö–æ–¥—è –∏–∑ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã
        time_on = amount[result]
        referrer = await get_user_info(call.from_user.id, 9)
        if referrer:
            check_to_already_get_referral_pay_by_this_user = await get_user_info(call.from_user.id, 11)
            if not check_to_already_get_referral_pay_by_this_user:
                result = await add_balance_for_refer(referrer, call.from_user.id)
                if result:
                    await bot.send_message(referrer, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n'
                                             '–ù–∞ –≤–∞—à —Å—á—ë—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ 25—Ä.\n'
                                             '\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!')
        await confirm_pay(call=call, amount_days=time_on)
    else:
        await call.message.answer(
            '–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, –ª–∏–±–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.',
            reply_markup=payed('yoomoney', 0))


@start_router.callback_query(lambda c: c.data.startswith('get-key_'))
async def check_is_confirmed(call: CallbackQuery):
    time_subscribe = call.data.split('_')[-1]
    await bot.edit_message_reply_markup(chat_id=call.from_user.id,
                                        message_id=call.message.message_id)
    await confirm_pay(call=call, amount_days=time_subscribe)


@start_router.callback_query(F.data == 'cancel_pay')
async def cancel_pay(call: CallbackQuery):
    await del_call_kb(call, True)
    await del_label(call.from_user.id)
    await call.message.answer(
        '–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå.\n–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.')
    await asyncio.sleep(3)
    await call.message.answer_photo(config('START'),
                                    MENU_TEXT.format(username=call.from_user.full_name
                                    if call.from_user.full_name
                                    else call.from_user.username),
                                    reply_markup=await main_inline_kb(call.from_user.id))


@start_router.callback_query(F.data == 'promo_step_2')
async def promik(call: CallbackQuery, state: FSMContext):
    await del_call_kb(call)
    await call.message.answer(
        '‚¨áÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ ‚¨áÔ∏è', reply_markup=cancel_fsm_kb())
    await state.set_state(Form.promokod)


@start_router.message(F.text, Form.promokod)
async def check_promo(message: Message, state: FSMContext):
    await state.update_data(promokod=message.text)
    LinkMsg.msg = (await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è... ‚è≥'))
    data_promo = await state.get_data()
    promo = data_promo['promokod']
    promo_info = await pop_promo(promo)
    await del_message_kb(message)
    if promo_info is not False:
        await del_message_kb(message)
        promo_time = promo_info[1]
        await message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ {promo} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üî•\n'
                             f'–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –Ω–∞ {promo_time} –Ω–µ–¥–µ–ª—å.\n'
                             '–û–∂–∏–¥–∞–π—Ç–µ –∫–ª—é—á –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é')
        await state.clear()
        await confirm_pay_msg(message, promo_time)
    else:
        await del_message_kb(message, True)
        await message.answer('–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        await message.answer('‚¨áÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ ‚¨áÔ∏è', reply_markup=cancel_fsm_kb())
        await state.set_state(Form.promokod)


@start_router.callback_query(F.data == 'cancel_FSM')
async def cancel_fsm(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await del_call_kb(call)
    await del_message_kb(call.message, True)
    await call.message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é')
    await asyncio.sleep(2)
    await call.message.answer_photo(config('START'),
                                    MENU_TEXT.format(username=call.from_user.full_name
                                    if call.from_user.full_name
                                    else call.from_user.username),
                                    reply_markup=await main_inline_kb(call.from_user.id))


@start_router.message(F.text)
async def nothing(message: Message):
    await del_message_kb(message, True)
    await message.answer('Error 404')
    await message.answer_photo(config('START'),
                               MENU_TEXT.format(username=message.from_user.full_name
                               if message.from_user.full_name
                               else message.from_user.username),
                               reply_markup=await main_inline_kb(message.from_user.id))

@start_router.message(F.photo)
async def get_photo_id(message: Message):
    photo = max(message.photo, key=lambda x: x.height)
    file_id = photo.file_id
    await message.answer(f'{file_id}')
